// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: mantik/engine/graph_builder.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A newly created node.
type NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the object inside the graph
	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// Information about the item
	Item *MantikItem `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{1}
}

func (x *NodeResponse) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *NodeResponse) GetItem() *MantikItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// A variable count of multiple created nodes.
type MultiNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The multiple created nodes
	Nodes []*NodeResponse `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *MultiNodeResponse) Reset() {
	*x = MultiNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiNodeResponse) ProtoMessage() {}

func (x *MultiNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiNodeResponse.ProtoReflect.Descriptor instead.
func (*MultiNodeResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{2}
}

func (x *MultiNodeResponse) GetNodes() []*NodeResponse {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatasetId   string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	AlgorithmId string `protobuf:"bytes,3,opt,name=algorithm_id,json=algorithmId,proto3" json:"algorithm_id,omitempty"`
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{3}
}

func (x *ApplyRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ApplyRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ApplyRequest) GetAlgorithmId() string {
	if x != nil {
		return x.AlgorithmId
	}
	return ""
}

type LiteralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Bundle    *Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *LiteralRequest) Reset() {
	*x = LiteralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralRequest) ProtoMessage() {}

func (x *LiteralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralRequest.ProtoReflect.Descriptor instead.
func (*LiteralRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{4}
}

func (x *LiteralRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LiteralRequest) GetBundle() *Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type CacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ItemId    string `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *CacheRequest) Reset() {
	*x = CacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheRequest) ProtoMessage() {}

func (x *CacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheRequest.ProtoReflect.Descriptor instead.
func (*CacheRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{5}
}

func (x *CacheRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CacheRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type TrainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId         string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TrainableId       string `protobuf:"bytes,2,opt,name=trainable_id,json=trainableId,proto3" json:"trainable_id,omitempty"`
	TrainingDatasetId string `protobuf:"bytes,3,opt,name=training_dataset_id,json=trainingDatasetId,proto3" json:"training_dataset_id,omitempty"`
	// if no caching is enabled, the result won't be auto cached
	// (the value is inverted, as protobuf defaults bools to false, which is the better default)
	NoCaching bool `protobuf:"varint,4,opt,name=no_caching,json=noCaching,proto3" json:"no_caching,omitempty"`
}

func (x *TrainRequest) Reset() {
	*x = TrainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainRequest) ProtoMessage() {}

func (x *TrainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainRequest.ProtoReflect.Descriptor instead.
func (*TrainRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{6}
}

func (x *TrainRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrainRequest) GetTrainableId() string {
	if x != nil {
		return x.TrainableId
	}
	return ""
}

func (x *TrainRequest) GetTrainingDatasetId() string {
	if x != nil {
		return x.TrainingDatasetId
	}
	return ""
}

func (x *TrainRequest) GetNoCaching() bool {
	if x != nil {
		return x.NoCaching
	}
	return false
}

type TrainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trained algorithm
	TrainedAlgorithm *NodeResponse `protobuf:"bytes,1,opt,name=trained_algorithm,json=trainedAlgorithm,proto3" json:"trained_algorithm,omitempty"`
	// The stats dataset
	StatDataset *NodeResponse `protobuf:"bytes,2,opt,name=stat_dataset,json=statDataset,proto3" json:"stat_dataset,omitempty"`
}

func (x *TrainResponse) Reset() {
	*x = TrainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainResponse) ProtoMessage() {}

func (x *TrainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainResponse.ProtoReflect.Descriptor instead.
func (*TrainResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{7}
}

func (x *TrainResponse) GetTrainedAlgorithm() *NodeResponse {
	if x != nil {
		return x.TrainedAlgorithm
	}
	return nil
}

func (x *TrainResponse) GetStatDataset() *NodeResponse {
	if x != nil {
		return x.StatDataset
	}
	return nil
}

type SelectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Select query like 'select x as y'
	SelectQuery string `protobuf:"bytes,3,opt,name=select_query,json=selectQuery,proto3" json:"select_query,omitempty"`
}

func (x *SelectRequest) Reset() {
	*x = SelectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRequest) ProtoMessage() {}

func (x *SelectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRequest.ProtoReflect.Descriptor instead.
func (*SelectRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{8}
}

func (x *SelectRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SelectRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *SelectRequest) GetSelectQuery() string {
	if x != nil {
		return x.SelectQuery
	}
	return ""
}

type AutoUnionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// left dataset
	DatasetId1 string `protobuf:"bytes,2,opt,name=dataset_id1,json=datasetId1,proto3" json:"dataset_id1,omitempty"`
	// right dataset
	DatasetId2 string `protobuf:"bytes,3,opt,name=dataset_id2,json=datasetId2,proto3" json:"dataset_id2,omitempty"`
	// if true, all results are emitted, otherwise duplicates are filtered (slower)
	All bool `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *AutoUnionRequest) Reset() {
	*x = AutoUnionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoUnionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoUnionRequest) ProtoMessage() {}

func (x *AutoUnionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoUnionRequest.ProtoReflect.Descriptor instead.
func (*AutoUnionRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{9}
}

func (x *AutoUnionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AutoUnionRequest) GetDatasetId1() string {
	if x != nil {
		return x.DatasetId1
	}
	return ""
}

func (x *AutoUnionRequest) GetDatasetId2() string {
	if x != nil {
		return x.DatasetId2
	}
	return ""
}

func (x *AutoUnionRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// SQL Query
	Statement string `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	// Dataset ids
	DatasetIds []string `protobuf:"bytes,3,rep,name=dataset_ids,json=datasetIds,proto3" json:"dataset_ids,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{10}
}

func (x *QueryRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryRequest) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *QueryRequest) GetDatasetIds() []string {
	if x != nil {
		return x.DatasetIds
	}
	return nil
}

type SplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The id of the dataset to split
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Defines the fractions in which to split the DataSet
	Fractions []float64 `protobuf:"fixed64,3,rep,packed,name=fractions,proto3" json:"fractions,omitempty"`
	// If true shuffle before splitting
	Shuffle bool `protobuf:"varint,4,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
	// The seed for shuffling
	ShuffleSeed int64 `protobuf:"varint,5,opt,name=shuffle_seed,json=shuffleSeed,proto3" json:"shuffle_seed,omitempty"`
	// If true disable caching during evaluation
	NoCaching bool `protobuf:"varint,6,opt,name=no_caching,json=noCaching,proto3" json:"no_caching,omitempty"`
}

func (x *SplitRequest) Reset() {
	*x = SplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRequest) ProtoMessage() {}

func (x *SplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRequest.ProtoReflect.Descriptor instead.
func (*SplitRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{11}
}

func (x *SplitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SplitRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *SplitRequest) GetFractions() []float64 {
	if x != nil {
		return x.Fractions
	}
	return nil
}

func (x *SplitRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

func (x *SplitRequest) GetShuffleSeed() int64 {
	if x != nil {
		return x.ShuffleSeed
	}
	return 0
}

func (x *SplitRequest) GetNoCaching() bool {
	if x != nil {
		return x.NoCaching
	}
	return false
}

// Request for Building a Pipeline
type BuildPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Steps for the pipeline
	Steps []*BuildPipelineStep `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	// Optional input type (required if the first step is a SELECT-Statement)
	InputType *DataType `protobuf:"bytes,3,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
}

func (x *BuildPipelineRequest) Reset() {
	*x = BuildPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildPipelineRequest) ProtoMessage() {}

func (x *BuildPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildPipelineRequest.ProtoReflect.Descriptor instead.
func (*BuildPipelineRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{12}
}

func (x *BuildPipelineRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BuildPipelineRequest) GetSteps() []*BuildPipelineStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *BuildPipelineRequest) GetInputType() *DataType {
	if x != nil {
		return x.InputType
	}
	return nil
}

// A Single step for BuildPipelineRequest
type BuildPipelineStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//	*BuildPipelineStep_Select
	//	*BuildPipelineStep_AlgorithmId
	Step isBuildPipelineStep_Step `protobuf_oneof:"step"`
}

func (x *BuildPipelineStep) Reset() {
	*x = BuildPipelineStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildPipelineStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildPipelineStep) ProtoMessage() {}

func (x *BuildPipelineStep) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildPipelineStep.ProtoReflect.Descriptor instead.
func (*BuildPipelineStep) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{13}
}

func (m *BuildPipelineStep) GetStep() isBuildPipelineStep_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *BuildPipelineStep) GetSelect() string {
	if x, ok := x.GetStep().(*BuildPipelineStep_Select); ok {
		return x.Select
	}
	return ""
}

func (x *BuildPipelineStep) GetAlgorithmId() string {
	if x, ok := x.GetStep().(*BuildPipelineStep_AlgorithmId); ok {
		return x.AlgorithmId
	}
	return ""
}

type isBuildPipelineStep_Step interface {
	isBuildPipelineStep_Step()
}

type BuildPipelineStep_Select struct {
	Select string `protobuf:"bytes,1,opt,name=select,proto3,oneof"`
}

type BuildPipelineStep_AlgorithmId struct {
	AlgorithmId string `protobuf:"bytes,2,opt,name=algorithm_id,json=algorithmId,proto3,oneof"`
}

func (*BuildPipelineStep_Select) isBuildPipelineStep_Step() {}

func (*BuildPipelineStep_AlgorithmId) isBuildPipelineStep_Step() {}

// A Single tag Request
type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ItemId        string `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	NamedMantikId string `protobuf:"bytes,3,opt,name=named_mantik_id,json=namedMantikId,proto3" json:"named_mantik_id,omitempty"`
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{14}
}

func (x *TagRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TagRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TagRequest) GetNamedMantikId() string {
	if x != nil {
		return x.NamedMantikId
	}
	return ""
}

// A Request for setting meta variables
type SetMetaVariableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string               `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ItemId    string               `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Values    []*MetaVariableValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SetMetaVariableRequest) Reset() {
	*x = SetMetaVariableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMetaVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMetaVariableRequest) ProtoMessage() {}

func (x *SetMetaVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMetaVariableRequest.ProtoReflect.Descriptor instead.
func (*SetMetaVariableRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{15}
}

func (x *SetMetaVariableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SetMetaVariableRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *SetMetaVariableRequest) GetValues() []*MetaVariableValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// A Single set meta variable
type MetaVariableValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the meta variable
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*MetaVariableValue_Json
	//	*MetaVariableValue_Bundle
	Value isMetaVariableValue_Value `protobuf_oneof:"value"`
}

func (x *MetaVariableValue) Reset() {
	*x = MetaVariableValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaVariableValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaVariableValue) ProtoMessage() {}

func (x *MetaVariableValue) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaVariableValue.ProtoReflect.Descriptor instead.
func (*MetaVariableValue) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{16}
}

func (x *MetaVariableValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *MetaVariableValue) GetValue() isMetaVariableValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MetaVariableValue) GetJson() string {
	if x, ok := x.GetValue().(*MetaVariableValue_Json); ok {
		return x.Json
	}
	return ""
}

func (x *MetaVariableValue) GetBundle() *Bundle {
	if x, ok := x.GetValue().(*MetaVariableValue_Bundle); ok {
		return x.Bundle
	}
	return nil
}

type isMetaVariableValue_Value interface {
	isMetaVariableValue_Value()
}

type MetaVariableValue_Json struct {
	// Value to be set as JSON (with omitted type)
	Json string `protobuf:"bytes,2,opt,name=json,proto3,oneof"`
}

type MetaVariableValue_Bundle struct {
	// Value to be set as Bundle (automatic conversion will be done, if possible)
	Bundle *Bundle `protobuf:"bytes,3,opt,name=bundle,proto3,oneof"`
}

func (*MetaVariableValue_Json) isMetaVariableValue_Value() {}

func (*MetaVariableValue_Bundle) isMetaVariableValue_Value() {}

// Construct a MantikItem.
// The header must fit a bridge's requirements
type ConstructRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session id
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The mantik header
	MantikHeaderJson string `protobuf:"bytes,2,opt,name=mantik_header_json,json=mantikHeaderJson,proto3" json:"mantik_header_json,omitempty"`
	// If true, there is payload.
	PayloadPresent bool `protobuf:"varint,3,opt,name=payload_present,json=payloadPresent,proto3" json:"payload_present,omitempty"`
	// Payload, if there is any. Can be repeated in multiple requests
	// The content type will be derived from a bridge's content type, if present.
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ConstructRequest) Reset() {
	*x = ConstructRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_graph_builder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructRequest) ProtoMessage() {}

func (x *ConstructRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_graph_builder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructRequest.ProtoReflect.Descriptor instead.
func (*ConstructRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_graph_builder_proto_rawDescGZIP(), []int{17}
}

func (x *ConstructRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ConstructRequest) GetMantikHeaderJson() string {
	if x != nil {
		return x.MantikHeaderJson
	}
	return ""
}

func (x *ConstructRequest) GetPayloadPresent() bool {
	if x != nil {
		return x.PayloadPresent
	}
	return false
}

func (x *ConstructRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_mantik_engine_graph_builder_proto protoreflect.FileDescriptor

var file_mantik_engine_graph_builder_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x16, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x60, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x50, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x0e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x46, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x48, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x70, 0x0a, 0x0d, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x31,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x22, 0x6c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x22, 0x6c, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x32, 0xe2, 0x09, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x70, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x0e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x07, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x09, 0x41,
	0x75, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x08,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69,
	0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x29, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x0f, 0x5a, 0x0d, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantik_engine_graph_builder_proto_rawDescOnce sync.Once
	file_mantik_engine_graph_builder_proto_rawDescData = file_mantik_engine_graph_builder_proto_rawDesc
)

func file_mantik_engine_graph_builder_proto_rawDescGZIP() []byte {
	file_mantik_engine_graph_builder_proto_rawDescOnce.Do(func() {
		file_mantik_engine_graph_builder_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantik_engine_graph_builder_proto_rawDescData)
	})
	return file_mantik_engine_graph_builder_proto_rawDescData
}

var file_mantik_engine_graph_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_mantik_engine_graph_builder_proto_goTypes = []interface{}{
	(*GetRequest)(nil),             // 0: ai.mantik.engine.protos.GetRequest
	(*NodeResponse)(nil),           // 1: ai.mantik.engine.protos.NodeResponse
	(*MultiNodeResponse)(nil),      // 2: ai.mantik.engine.protos.MultiNodeResponse
	(*ApplyRequest)(nil),           // 3: ai.mantik.engine.protos.ApplyRequest
	(*LiteralRequest)(nil),         // 4: ai.mantik.engine.protos.LiteralRequest
	(*CacheRequest)(nil),           // 5: ai.mantik.engine.protos.CacheRequest
	(*TrainRequest)(nil),           // 6: ai.mantik.engine.protos.TrainRequest
	(*TrainResponse)(nil),          // 7: ai.mantik.engine.protos.TrainResponse
	(*SelectRequest)(nil),          // 8: ai.mantik.engine.protos.SelectRequest
	(*AutoUnionRequest)(nil),       // 9: ai.mantik.engine.protos.AutoUnionRequest
	(*QueryRequest)(nil),           // 10: ai.mantik.engine.protos.QueryRequest
	(*SplitRequest)(nil),           // 11: ai.mantik.engine.protos.SplitRequest
	(*BuildPipelineRequest)(nil),   // 12: ai.mantik.engine.protos.BuildPipelineRequest
	(*BuildPipelineStep)(nil),      // 13: ai.mantik.engine.protos.BuildPipelineStep
	(*TagRequest)(nil),             // 14: ai.mantik.engine.protos.TagRequest
	(*SetMetaVariableRequest)(nil), // 15: ai.mantik.engine.protos.SetMetaVariableRequest
	(*MetaVariableValue)(nil),      // 16: ai.mantik.engine.protos.MetaVariableValue
	(*ConstructRequest)(nil),       // 17: ai.mantik.engine.protos.ConstructRequest
	(*MantikItem)(nil),             // 18: ai.mantik.engine.protos.MantikItem
	(*Bundle)(nil),                 // 19: ai.mantik.engine.protos.Bundle
	(*DataType)(nil),               // 20: ai.mantik.engine.protos.DataType
}
var file_mantik_engine_graph_builder_proto_depIdxs = []int32{
	18, // 0: ai.mantik.engine.protos.NodeResponse.item:type_name -> ai.mantik.engine.protos.MantikItem
	1,  // 1: ai.mantik.engine.protos.MultiNodeResponse.nodes:type_name -> ai.mantik.engine.protos.NodeResponse
	19, // 2: ai.mantik.engine.protos.LiteralRequest.bundle:type_name -> ai.mantik.engine.protos.Bundle
	1,  // 3: ai.mantik.engine.protos.TrainResponse.trained_algorithm:type_name -> ai.mantik.engine.protos.NodeResponse
	1,  // 4: ai.mantik.engine.protos.TrainResponse.stat_dataset:type_name -> ai.mantik.engine.protos.NodeResponse
	13, // 5: ai.mantik.engine.protos.BuildPipelineRequest.steps:type_name -> ai.mantik.engine.protos.BuildPipelineStep
	20, // 6: ai.mantik.engine.protos.BuildPipelineRequest.input_type:type_name -> ai.mantik.engine.protos.DataType
	16, // 7: ai.mantik.engine.protos.SetMetaVariableRequest.values:type_name -> ai.mantik.engine.protos.MetaVariableValue
	19, // 8: ai.mantik.engine.protos.MetaVariableValue.bundle:type_name -> ai.mantik.engine.protos.Bundle
	0,  // 9: ai.mantik.engine.protos.GraphBuilderService.Get:input_type -> ai.mantik.engine.protos.GetRequest
	3,  // 10: ai.mantik.engine.protos.GraphBuilderService.AlgorithmApply:input_type -> ai.mantik.engine.protos.ApplyRequest
	6,  // 11: ai.mantik.engine.protos.GraphBuilderService.Train:input_type -> ai.mantik.engine.protos.TrainRequest
	4,  // 12: ai.mantik.engine.protos.GraphBuilderService.Literal:input_type -> ai.mantik.engine.protos.LiteralRequest
	5,  // 13: ai.mantik.engine.protos.GraphBuilderService.Cached:input_type -> ai.mantik.engine.protos.CacheRequest
	8,  // 14: ai.mantik.engine.protos.GraphBuilderService.Select:input_type -> ai.mantik.engine.protos.SelectRequest
	9,  // 15: ai.mantik.engine.protos.GraphBuilderService.AutoUnion:input_type -> ai.mantik.engine.protos.AutoUnionRequest
	10, // 16: ai.mantik.engine.protos.GraphBuilderService.SqlQuery:input_type -> ai.mantik.engine.protos.QueryRequest
	11, // 17: ai.mantik.engine.protos.GraphBuilderService.Split:input_type -> ai.mantik.engine.protos.SplitRequest
	12, // 18: ai.mantik.engine.protos.GraphBuilderService.BuildPipeline:input_type -> ai.mantik.engine.protos.BuildPipelineRequest
	14, // 19: ai.mantik.engine.protos.GraphBuilderService.Tag:input_type -> ai.mantik.engine.protos.TagRequest
	15, // 20: ai.mantik.engine.protos.GraphBuilderService.SetMetaVariables:input_type -> ai.mantik.engine.protos.SetMetaVariableRequest
	17, // 21: ai.mantik.engine.protos.GraphBuilderService.Construct:input_type -> ai.mantik.engine.protos.ConstructRequest
	1,  // 22: ai.mantik.engine.protos.GraphBuilderService.Get:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 23: ai.mantik.engine.protos.GraphBuilderService.AlgorithmApply:output_type -> ai.mantik.engine.protos.NodeResponse
	7,  // 24: ai.mantik.engine.protos.GraphBuilderService.Train:output_type -> ai.mantik.engine.protos.TrainResponse
	1,  // 25: ai.mantik.engine.protos.GraphBuilderService.Literal:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 26: ai.mantik.engine.protos.GraphBuilderService.Cached:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 27: ai.mantik.engine.protos.GraphBuilderService.Select:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 28: ai.mantik.engine.protos.GraphBuilderService.AutoUnion:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 29: ai.mantik.engine.protos.GraphBuilderService.SqlQuery:output_type -> ai.mantik.engine.protos.NodeResponse
	2,  // 30: ai.mantik.engine.protos.GraphBuilderService.Split:output_type -> ai.mantik.engine.protos.MultiNodeResponse
	1,  // 31: ai.mantik.engine.protos.GraphBuilderService.BuildPipeline:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 32: ai.mantik.engine.protos.GraphBuilderService.Tag:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 33: ai.mantik.engine.protos.GraphBuilderService.SetMetaVariables:output_type -> ai.mantik.engine.protos.NodeResponse
	1,  // 34: ai.mantik.engine.protos.GraphBuilderService.Construct:output_type -> ai.mantik.engine.protos.NodeResponse
	22, // [22:35] is the sub-list for method output_type
	9,  // [9:22] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_mantik_engine_graph_builder_proto_init() }
func file_mantik_engine_graph_builder_proto_init() {
	if File_mantik_engine_graph_builder_proto != nil {
		return
	}
	file_mantik_engine_ds_proto_init()
	file_mantik_engine_items_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mantik_engine_graph_builder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoUnionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildPipelineStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMetaVariableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaVariableValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_graph_builder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mantik_engine_graph_builder_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*BuildPipelineStep_Select)(nil),
		(*BuildPipelineStep_AlgorithmId)(nil),
	}
	file_mantik_engine_graph_builder_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MetaVariableValue_Json)(nil),
		(*MetaVariableValue_Bundle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantik_engine_graph_builder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mantik_engine_graph_builder_proto_goTypes,
		DependencyIndexes: file_mantik_engine_graph_builder_proto_depIdxs,
		MessageInfos:      file_mantik_engine_graph_builder_proto_msgTypes,
	}.Build()
	File_mantik_engine_graph_builder_proto = out.File
	file_mantik_engine_graph_builder_proto_rawDesc = nil
	file_mantik_engine_graph_builder_proto_goTypes = nil
	file_mantik_engine_graph_builder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GraphBuilderServiceClient is the client API for GraphBuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphBuilderServiceClient interface {
	//* Loads a new node from the repository.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Applies an algorithm (or pipeline) to a dataset.
	AlgorithmApply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Trains an algorithm with a dataset.
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	//* Generates a node from a literal.
	Literal(ctx context.Context, in *LiteralRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Generates a cached copy of an item.
	Cached(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Run a select query on the dataset item.
	Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Run a auto union query on two datasets.
	AutoUnion(ctx context.Context, in *AutoUnionRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Run a SQL Query on datasets.
	SqlQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	//* Split a DataSet into multiple fractions.
	Split(ctx context.Context, in *SplitRequest, opts ...grpc.CallOption) (*MultiNodeResponse, error)
	//* Build a pipeline from Algorithms.
	BuildPipeline(ctx context.Context, in *BuildPipelineRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	// Returns the item using a new name.
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	// Set Meta Variables of an Item.
	SetMetaVariables(ctx context.Context, in *SetMetaVariableRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	// Construct a MantikItem. Note: very low level.
	Construct(ctx context.Context, opts ...grpc.CallOption) (GraphBuilderService_ConstructClient, error)
}

type graphBuilderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphBuilderServiceClient(cc grpc.ClientConnInterface) GraphBuilderServiceClient {
	return &graphBuilderServiceClient{cc}
}

func (c *graphBuilderServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) AlgorithmApply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/AlgorithmApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Literal(ctx context.Context, in *LiteralRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Literal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Cached(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Cached", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) AutoUnion(ctx context.Context, in *AutoUnionRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/AutoUnion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) SqlQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/SqlQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Split(ctx context.Context, in *SplitRequest, opts ...grpc.CallOption) (*MultiNodeResponse, error) {
	out := new(MultiNodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Split", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) BuildPipeline(ctx context.Context, in *BuildPipelineRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/BuildPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) SetMetaVariables(ctx context.Context, in *SetMetaVariableRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.GraphBuilderService/SetMetaVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphBuilderServiceClient) Construct(ctx context.Context, opts ...grpc.CallOption) (GraphBuilderService_ConstructClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GraphBuilderService_serviceDesc.Streams[0], "/ai.mantik.engine.protos.GraphBuilderService/Construct", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphBuilderServiceConstructClient{stream}
	return x, nil
}

type GraphBuilderService_ConstructClient interface {
	Send(*ConstructRequest) error
	CloseAndRecv() (*NodeResponse, error)
	grpc.ClientStream
}

type graphBuilderServiceConstructClient struct {
	grpc.ClientStream
}

func (x *graphBuilderServiceConstructClient) Send(m *ConstructRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *graphBuilderServiceConstructClient) CloseAndRecv() (*NodeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphBuilderServiceServer is the server API for GraphBuilderService service.
type GraphBuilderServiceServer interface {
	//* Loads a new node from the repository.
	Get(context.Context, *GetRequest) (*NodeResponse, error)
	//* Applies an algorithm (or pipeline) to a dataset.
	AlgorithmApply(context.Context, *ApplyRequest) (*NodeResponse, error)
	//* Trains an algorithm with a dataset.
	Train(context.Context, *TrainRequest) (*TrainResponse, error)
	//* Generates a node from a literal.
	Literal(context.Context, *LiteralRequest) (*NodeResponse, error)
	//* Generates a cached copy of an item.
	Cached(context.Context, *CacheRequest) (*NodeResponse, error)
	//* Run a select query on the dataset item.
	Select(context.Context, *SelectRequest) (*NodeResponse, error)
	//* Run a auto union query on two datasets.
	AutoUnion(context.Context, *AutoUnionRequest) (*NodeResponse, error)
	//* Run a SQL Query on datasets.
	SqlQuery(context.Context, *QueryRequest) (*NodeResponse, error)
	//* Split a DataSet into multiple fractions.
	Split(context.Context, *SplitRequest) (*MultiNodeResponse, error)
	//* Build a pipeline from Algorithms.
	BuildPipeline(context.Context, *BuildPipelineRequest) (*NodeResponse, error)
	// Returns the item using a new name.
	Tag(context.Context, *TagRequest) (*NodeResponse, error)
	// Set Meta Variables of an Item.
	SetMetaVariables(context.Context, *SetMetaVariableRequest) (*NodeResponse, error)
	// Construct a MantikItem. Note: very low level.
	Construct(GraphBuilderService_ConstructServer) error
}

// UnimplementedGraphBuilderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGraphBuilderServiceServer struct {
}

func (*UnimplementedGraphBuilderServiceServer) Get(context.Context, *GetRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) AlgorithmApply(context.Context, *ApplyRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlgorithmApply not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Train(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Literal(context.Context, *LiteralRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Literal not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Cached(context.Context, *CacheRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cached not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Select(context.Context, *SelectRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) AutoUnion(context.Context, *AutoUnionRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoUnion not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) SqlQuery(context.Context, *QueryRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqlQuery not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Split(context.Context, *SplitRequest) (*MultiNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Split not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) BuildPipeline(context.Context, *BuildPipelineRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildPipeline not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Tag(context.Context, *TagRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) SetMetaVariables(context.Context, *SetMetaVariableRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetaVariables not implemented")
}
func (*UnimplementedGraphBuilderServiceServer) Construct(GraphBuilderService_ConstructServer) error {
	return status.Errorf(codes.Unimplemented, "method Construct not implemented")
}

func RegisterGraphBuilderServiceServer(s *grpc.Server, srv GraphBuilderServiceServer) {
	s.RegisterService(&_GraphBuilderService_serviceDesc, srv)
}

func _GraphBuilderService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_AlgorithmApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).AlgorithmApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/AlgorithmApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).AlgorithmApply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Literal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiteralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Literal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Literal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Literal(ctx, req.(*LiteralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Cached_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Cached(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Cached",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Cached(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Select(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_AutoUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoUnionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).AutoUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/AutoUnion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).AutoUnion(ctx, req.(*AutoUnionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_SqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).SqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/SqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).SqlQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Split_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Split(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Split",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Split(ctx, req.(*SplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_BuildPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).BuildPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/BuildPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).BuildPipeline(ctx, req.(*BuildPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_SetMetaVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetaVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBuilderServiceServer).SetMetaVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.GraphBuilderService/SetMetaVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBuilderServiceServer).SetMetaVariables(ctx, req.(*SetMetaVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphBuilderService_Construct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GraphBuilderServiceServer).Construct(&graphBuilderServiceConstructServer{stream})
}

type GraphBuilderService_ConstructServer interface {
	SendAndClose(*NodeResponse) error
	Recv() (*ConstructRequest, error)
	grpc.ServerStream
}

type graphBuilderServiceConstructServer struct {
	grpc.ServerStream
}

func (x *graphBuilderServiceConstructServer) SendAndClose(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *graphBuilderServiceConstructServer) Recv() (*ConstructRequest, error) {
	m := new(ConstructRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GraphBuilderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.mantik.engine.protos.GraphBuilderService",
	HandlerType: (*GraphBuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GraphBuilderService_Get_Handler,
		},
		{
			MethodName: "AlgorithmApply",
			Handler:    _GraphBuilderService_AlgorithmApply_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _GraphBuilderService_Train_Handler,
		},
		{
			MethodName: "Literal",
			Handler:    _GraphBuilderService_Literal_Handler,
		},
		{
			MethodName: "Cached",
			Handler:    _GraphBuilderService_Cached_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _GraphBuilderService_Select_Handler,
		},
		{
			MethodName: "AutoUnion",
			Handler:    _GraphBuilderService_AutoUnion_Handler,
		},
		{
			MethodName: "SqlQuery",
			Handler:    _GraphBuilderService_SqlQuery_Handler,
		},
		{
			MethodName: "Split",
			Handler:    _GraphBuilderService_Split_Handler,
		},
		{
			MethodName: "BuildPipeline",
			Handler:    _GraphBuilderService_BuildPipeline_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _GraphBuilderService_Tag_Handler,
		},
		{
			MethodName: "SetMetaVariables",
			Handler:    _GraphBuilderService_SetMetaVariables_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Construct",
			Handler:       _GraphBuilderService_Construct_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mantik/engine/graph_builder.proto",
}
