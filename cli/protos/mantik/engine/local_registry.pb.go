// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: mantik/engine/local_registry.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Mantik Id (can be a ItemId (starting with '@' or Named Mantik Id)
	MantikId string `protobuf:"bytes,1,opt,name=mantik_id,json=mantikId,proto3" json:"mantik_id,omitempty"`
}

func (x *GetArtifactRequest) Reset() {
	*x = GetArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactRequest) ProtoMessage() {}

func (x *GetArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactRequest.ProtoReflect.Descriptor instead.
func (*GetArtifactRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{0}
}

func (x *GetArtifactRequest) GetMantikId() string {
	if x != nil {
		return x.MantikId
	}
	return ""
}

type GetArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The artifact
	Artifact *MantikArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *GetArtifactResponse) Reset() {
	*x = GetArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactResponse) ProtoMessage() {}

func (x *GetArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactResponse.ProtoReflect.Descriptor instead.
func (*GetArtifactResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{1}
}

func (x *GetArtifactResponse) GetArtifact() *MantikArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type TagArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MantikId         string `protobuf:"bytes,1,opt,name=mantik_id,json=mantikId,proto3" json:"mantik_id,omitempty"`
	NewNamedMantikId string `protobuf:"bytes,2,opt,name=new_named_mantik_id,json=newNamedMantikId,proto3" json:"new_named_mantik_id,omitempty"`
}

func (x *TagArtifactRequest) Reset() {
	*x = TagArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagArtifactRequest) ProtoMessage() {}

func (x *TagArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagArtifactRequest.ProtoReflect.Descriptor instead.
func (*TagArtifactRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{2}
}

func (x *TagArtifactRequest) GetMantikId() string {
	if x != nil {
		return x.MantikId
	}
	return ""
}

func (x *TagArtifactRequest) GetNewNamedMantikId() string {
	if x != nil {
		return x.NewNamedMantikId
	}
	return ""
}

type TagArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true if there was a change
	Changed bool `protobuf:"varint,1,opt,name=changed,proto3" json:"changed,omitempty"`
}

func (x *TagArtifactResponse) Reset() {
	*x = TagArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagArtifactResponse) ProtoMessage() {}

func (x *TagArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagArtifactResponse.ProtoReflect.Descriptor instead.
func (*TagArtifactResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{3}
}

func (x *TagArtifactResponse) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

type ListArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if true, only list deployed
	Deployed bool `protobuf:"varint,1,opt,name=deployed,proto3" json:"deployed,omitempty"`
	// if true, also list items which do not have a name
	Anonymous bool `protobuf:"varint,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	// if set, only list items of a given kind
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ListArtifactsRequest) Reset() {
	*x = ListArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactsRequest) ProtoMessage() {}

func (x *ListArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ListArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{4}
}

func (x *ListArtifactsRequest) GetDeployed() bool {
	if x != nil {
		return x.Deployed
	}
	return false
}

func (x *ListArtifactsRequest) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *ListArtifactsRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ListArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The mantik artifacts matching the list requests
	Artifacts []*MantikArtifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *ListArtifactResponse) Reset() {
	*x = ListArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactResponse) ProtoMessage() {}

func (x *ListArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactResponse.ProtoReflect.Descriptor instead.
func (*ListArtifactResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{5}
}

func (x *ListArtifactResponse) GetArtifacts() []*MantikArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type AddArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header part
	// Optional Named Mantik Id, overriding an (optional) name inside the MantikHeader
	// If there are no named Mantik Ids either here nor inside MantikHeader, then an
	// anonymous item is generated.
	NamedMantikId string `protobuf:"bytes,1,opt,name=named_mantik_id,json=namedMantikId,proto3" json:"named_mantik_id,omitempty"`
	// Mantik Header
	MantikHeader string `protobuf:"bytes,2,opt,name=mantik_header,json=mantikHeader,proto3" json:"mantik_header,omitempty"`
	// Payload content type
	// Must be set if there is content
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Payload (can be set on header and all following)
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AddArtifactRequest) Reset() {
	*x = AddArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddArtifactRequest) ProtoMessage() {}

func (x *AddArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddArtifactRequest.ProtoReflect.Descriptor instead.
func (*AddArtifactRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{6}
}

func (x *AddArtifactRequest) GetNamedMantikId() string {
	if x != nil {
		return x.NamedMantikId
	}
	return ""
}

func (x *AddArtifactRequest) GetMantikHeader() string {
	if x != nil {
		return x.MantikHeader
	}
	return ""
}

func (x *AddArtifactRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AddArtifactRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type AddArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Artifact
	Artifact *MantikArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *AddArtifactResponse) Reset() {
	*x = AddArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddArtifactResponse) ProtoMessage() {}

func (x *AddArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddArtifactResponse.ProtoReflect.Descriptor instead.
func (*AddArtifactResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{7}
}

func (x *AddArtifactResponse) GetArtifact() *MantikArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type GetArtifactWithPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header
	Artifact *MantikArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// May be empty if there is no payload
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Streamed content
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetArtifactWithPayloadResponse) Reset() {
	*x = GetArtifactWithPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_local_registry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtifactWithPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactWithPayloadResponse) ProtoMessage() {}

func (x *GetArtifactWithPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_local_registry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactWithPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetArtifactWithPayloadResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_local_registry_proto_rawDescGZIP(), []int{8}
}

func (x *GetArtifactWithPayloadResponse) GetArtifact() *MantikArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *GetArtifactWithPayloadResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *GetArtifactWithPayloadResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_mantik_engine_local_registry_proto protoreflect.FileDescriptor

var file_mantik_engine_local_registry_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1c, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49, 0x64, 0x22, 0x5a,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x60, 0x0a, 0x12, 0x54, 0x61,
	0x67, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x13, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13,
	0x54, 0x61, 0x67, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x64, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x5d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22,
	0xa2, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x61, 0x6e, 0x74, 0x69, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x32, 0xd2, 0x04, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x54, 0x61, 0x67,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x61, 0x67, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61,
	0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0f, 0x5a, 0x0d, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_mantik_engine_local_registry_proto_rawDescOnce sync.Once
	file_mantik_engine_local_registry_proto_rawDescData = file_mantik_engine_local_registry_proto_rawDesc
)

func file_mantik_engine_local_registry_proto_rawDescGZIP() []byte {
	file_mantik_engine_local_registry_proto_rawDescOnce.Do(func() {
		file_mantik_engine_local_registry_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantik_engine_local_registry_proto_rawDescData)
	})
	return file_mantik_engine_local_registry_proto_rawDescData
}

var file_mantik_engine_local_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mantik_engine_local_registry_proto_goTypes = []interface{}{
	(*GetArtifactRequest)(nil),             // 0: ai.mantik.engine.protos.GetArtifactRequest
	(*GetArtifactResponse)(nil),            // 1: ai.mantik.engine.protos.GetArtifactResponse
	(*TagArtifactRequest)(nil),             // 2: ai.mantik.engine.protos.TagArtifactRequest
	(*TagArtifactResponse)(nil),            // 3: ai.mantik.engine.protos.TagArtifactResponse
	(*ListArtifactsRequest)(nil),           // 4: ai.mantik.engine.protos.ListArtifactsRequest
	(*ListArtifactResponse)(nil),           // 5: ai.mantik.engine.protos.ListArtifactResponse
	(*AddArtifactRequest)(nil),             // 6: ai.mantik.engine.protos.AddArtifactRequest
	(*AddArtifactResponse)(nil),            // 7: ai.mantik.engine.protos.AddArtifactResponse
	(*GetArtifactWithPayloadResponse)(nil), // 8: ai.mantik.engine.protos.GetArtifactWithPayloadResponse
	(*MantikArtifact)(nil),                 // 9: ai.mantik.engine.protos.MantikArtifact
}
var file_mantik_engine_local_registry_proto_depIdxs = []int32{
	9, // 0: ai.mantik.engine.protos.GetArtifactResponse.artifact:type_name -> ai.mantik.engine.protos.MantikArtifact
	9, // 1: ai.mantik.engine.protos.ListArtifactResponse.artifacts:type_name -> ai.mantik.engine.protos.MantikArtifact
	9, // 2: ai.mantik.engine.protos.AddArtifactResponse.artifact:type_name -> ai.mantik.engine.protos.MantikArtifact
	9, // 3: ai.mantik.engine.protos.GetArtifactWithPayloadResponse.artifact:type_name -> ai.mantik.engine.protos.MantikArtifact
	0, // 4: ai.mantik.engine.protos.LocalRegistryService.GetArtifact:input_type -> ai.mantik.engine.protos.GetArtifactRequest
	2, // 5: ai.mantik.engine.protos.LocalRegistryService.TagArtifact:input_type -> ai.mantik.engine.protos.TagArtifactRequest
	4, // 6: ai.mantik.engine.protos.LocalRegistryService.ListArtifacts:input_type -> ai.mantik.engine.protos.ListArtifactsRequest
	6, // 7: ai.mantik.engine.protos.LocalRegistryService.AddArtifact:input_type -> ai.mantik.engine.protos.AddArtifactRequest
	0, // 8: ai.mantik.engine.protos.LocalRegistryService.GetArtifactWithPayload:input_type -> ai.mantik.engine.protos.GetArtifactRequest
	1, // 9: ai.mantik.engine.protos.LocalRegistryService.GetArtifact:output_type -> ai.mantik.engine.protos.GetArtifactResponse
	3, // 10: ai.mantik.engine.protos.LocalRegistryService.TagArtifact:output_type -> ai.mantik.engine.protos.TagArtifactResponse
	5, // 11: ai.mantik.engine.protos.LocalRegistryService.ListArtifacts:output_type -> ai.mantik.engine.protos.ListArtifactResponse
	7, // 12: ai.mantik.engine.protos.LocalRegistryService.AddArtifact:output_type -> ai.mantik.engine.protos.AddArtifactResponse
	8, // 13: ai.mantik.engine.protos.LocalRegistryService.GetArtifactWithPayload:output_type -> ai.mantik.engine.protos.GetArtifactWithPayloadResponse
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_mantik_engine_local_registry_proto_init() }
func file_mantik_engine_local_registry_proto_init() {
	if File_mantik_engine_local_registry_proto != nil {
		return
	}
	file_mantik_engine_registry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mantik_engine_local_registry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_local_registry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtifactWithPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantik_engine_local_registry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mantik_engine_local_registry_proto_goTypes,
		DependencyIndexes: file_mantik_engine_local_registry_proto_depIdxs,
		MessageInfos:      file_mantik_engine_local_registry_proto_msgTypes,
	}.Build()
	File_mantik_engine_local_registry_proto = out.File
	file_mantik_engine_local_registry_proto_rawDesc = nil
	file_mantik_engine_local_registry_proto_goTypes = nil
	file_mantik_engine_local_registry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocalRegistryServiceClient is the client API for LocalRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalRegistryServiceClient interface {
	// Returns a single artifact.
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	// Tag a single artifact
	TagArtifact(ctx context.Context, in *TagArtifactRequest, opts ...grpc.CallOption) (*TagArtifactResponse, error)
	// List artifacts
	ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactResponse, error)
	// Add an artifact
	AddArtifact(ctx context.Context, opts ...grpc.CallOption) (LocalRegistryService_AddArtifactClient, error)
	// Get an Artifact including payload
	GetArtifactWithPayload(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (LocalRegistryService_GetArtifactWithPayloadClient, error)
}

type localRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalRegistryServiceClient(cc grpc.ClientConnInterface) LocalRegistryServiceClient {
	return &localRegistryServiceClient{cc}
}

func (c *localRegistryServiceClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.LocalRegistryService/GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localRegistryServiceClient) TagArtifact(ctx context.Context, in *TagArtifactRequest, opts ...grpc.CallOption) (*TagArtifactResponse, error) {
	out := new(TagArtifactResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.LocalRegistryService/TagArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localRegistryServiceClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactResponse, error) {
	out := new(ListArtifactResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.LocalRegistryService/ListArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localRegistryServiceClient) AddArtifact(ctx context.Context, opts ...grpc.CallOption) (LocalRegistryService_AddArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalRegistryService_serviceDesc.Streams[0], "/ai.mantik.engine.protos.LocalRegistryService/AddArtifact", opts...)
	if err != nil {
		return nil, err
	}
	x := &localRegistryServiceAddArtifactClient{stream}
	return x, nil
}

type LocalRegistryService_AddArtifactClient interface {
	Send(*AddArtifactRequest) error
	CloseAndRecv() (*AddArtifactResponse, error)
	grpc.ClientStream
}

type localRegistryServiceAddArtifactClient struct {
	grpc.ClientStream
}

func (x *localRegistryServiceAddArtifactClient) Send(m *AddArtifactRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localRegistryServiceAddArtifactClient) CloseAndRecv() (*AddArtifactResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddArtifactResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localRegistryServiceClient) GetArtifactWithPayload(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (LocalRegistryService_GetArtifactWithPayloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalRegistryService_serviceDesc.Streams[1], "/ai.mantik.engine.protos.LocalRegistryService/GetArtifactWithPayload", opts...)
	if err != nil {
		return nil, err
	}
	x := &localRegistryServiceGetArtifactWithPayloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalRegistryService_GetArtifactWithPayloadClient interface {
	Recv() (*GetArtifactWithPayloadResponse, error)
	grpc.ClientStream
}

type localRegistryServiceGetArtifactWithPayloadClient struct {
	grpc.ClientStream
}

func (x *localRegistryServiceGetArtifactWithPayloadClient) Recv() (*GetArtifactWithPayloadResponse, error) {
	m := new(GetArtifactWithPayloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalRegistryServiceServer is the server API for LocalRegistryService service.
type LocalRegistryServiceServer interface {
	// Returns a single artifact.
	GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	// Tag a single artifact
	TagArtifact(context.Context, *TagArtifactRequest) (*TagArtifactResponse, error)
	// List artifacts
	ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactResponse, error)
	// Add an artifact
	AddArtifact(LocalRegistryService_AddArtifactServer) error
	// Get an Artifact including payload
	GetArtifactWithPayload(*GetArtifactRequest, LocalRegistryService_GetArtifactWithPayloadServer) error
}

// UnimplementedLocalRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLocalRegistryServiceServer struct {
}

func (*UnimplementedLocalRegistryServiceServer) GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (*UnimplementedLocalRegistryServiceServer) TagArtifact(context.Context, *TagArtifactRequest) (*TagArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagArtifact not implemented")
}
func (*UnimplementedLocalRegistryServiceServer) ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (*UnimplementedLocalRegistryServiceServer) AddArtifact(LocalRegistryService_AddArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method AddArtifact not implemented")
}
func (*UnimplementedLocalRegistryServiceServer) GetArtifactWithPayload(*GetArtifactRequest, LocalRegistryService_GetArtifactWithPayloadServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArtifactWithPayload not implemented")
}

func RegisterLocalRegistryServiceServer(s *grpc.Server, srv LocalRegistryServiceServer) {
	s.RegisterService(&_LocalRegistryService_serviceDesc, srv)
}

func _LocalRegistryService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalRegistryServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.LocalRegistryService/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalRegistryServiceServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalRegistryService_TagArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalRegistryServiceServer).TagArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.LocalRegistryService/TagArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalRegistryServiceServer).TagArtifact(ctx, req.(*TagArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalRegistryService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalRegistryServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.LocalRegistryService/ListArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalRegistryServiceServer).ListArtifacts(ctx, req.(*ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalRegistryService_AddArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalRegistryServiceServer).AddArtifact(&localRegistryServiceAddArtifactServer{stream})
}

type LocalRegistryService_AddArtifactServer interface {
	SendAndClose(*AddArtifactResponse) error
	Recv() (*AddArtifactRequest, error)
	grpc.ServerStream
}

type localRegistryServiceAddArtifactServer struct {
	grpc.ServerStream
}

func (x *localRegistryServiceAddArtifactServer) SendAndClose(m *AddArtifactResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localRegistryServiceAddArtifactServer) Recv() (*AddArtifactRequest, error) {
	m := new(AddArtifactRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalRegistryService_GetArtifactWithPayload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetArtifactRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalRegistryServiceServer).GetArtifactWithPayload(m, &localRegistryServiceGetArtifactWithPayloadServer{stream})
}

type LocalRegistryService_GetArtifactWithPayloadServer interface {
	Send(*GetArtifactWithPayloadResponse) error
	grpc.ServerStream
}

type localRegistryServiceGetArtifactWithPayloadServer struct {
	grpc.ServerStream
}

func (x *localRegistryServiceGetArtifactWithPayloadServer) Send(m *GetArtifactWithPayloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LocalRegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.mantik.engine.protos.LocalRegistryService",
	HandlerType: (*LocalRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtifact",
			Handler:    _LocalRegistryService_GetArtifact_Handler,
		},
		{
			MethodName: "TagArtifact",
			Handler:    _LocalRegistryService_TagArtifact_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _LocalRegistryService_ListArtifacts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddArtifact",
			Handler:       _LocalRegistryService_AddArtifact_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetArtifactWithPayload",
			Handler:       _LocalRegistryService_GetArtifactWithPayload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mantik/engine/local_registry.proto",
}
