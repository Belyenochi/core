// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: mantik/engine/remote_registry.proto

package engine

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PullArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mantik Id to pull
	MantikId string `protobuf:"bytes,1,opt,name=mantik_id,json=mantikId,proto3" json:"mantik_id,omitempty"`
	// The login token to. If not set, the default backend is used
	Token *LoginToken `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PullArtifactRequest) Reset() {
	*x = PullArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullArtifactRequest) ProtoMessage() {}

func (x *PullArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullArtifactRequest.ProtoReflect.Descriptor instead.
func (*PullArtifactRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{0}
}

func (x *PullArtifactRequest) GetMantikId() string {
	if x != nil {
		return x.MantikId
	}
	return ""
}

func (x *PullArtifactRequest) GetToken() *LoginToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type PullArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The (main) artifact
	Artifact *MantikArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// The artifact hull
	Hull []*MantikArtifact `protobuf:"bytes,2,rep,name=hull,proto3" json:"hull,omitempty"`
}

func (x *PullArtifactResponse) Reset() {
	*x = PullArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullArtifactResponse) ProtoMessage() {}

func (x *PullArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullArtifactResponse.ProtoReflect.Descriptor instead.
func (*PullArtifactResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{1}
}

func (x *PullArtifactResponse) GetArtifact() *MantikArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *PullArtifactResponse) GetHull() []*MantikArtifact {
	if x != nil {
		return x.Hull
	}
	return nil
}

type PushArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mantik Id to push
	MantikId string `protobuf:"bytes,1,opt,name=mantik_id,json=mantikId,proto3" json:"mantik_id,omitempty"`
	// The login token to. If not set, the default backend is used
	Token *LoginToken `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PushArtifactRequest) Reset() {
	*x = PushArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushArtifactRequest) ProtoMessage() {}

func (x *PushArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushArtifactRequest.ProtoReflect.Descriptor instead.
func (*PushArtifactRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{2}
}

func (x *PushArtifactRequest) GetMantikId() string {
	if x != nil {
		return x.MantikId
	}
	return ""
}

func (x *PushArtifactRequest) GetToken() *LoginToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type PushArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The (main) artifact
	Artifact *MantikArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// The artifact hull
	Hull []*MantikArtifact `protobuf:"bytes,2,rep,name=hull,proto3" json:"hull,omitempty"`
}

func (x *PushArtifactResponse) Reset() {
	*x = PushArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushArtifactResponse) ProtoMessage() {}

func (x *PushArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushArtifactResponse.ProtoReflect.Descriptor instead.
func (*PushArtifactResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{3}
}

func (x *PushArtifactResponse) GetArtifact() *MantikArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *PushArtifactResponse) GetHull() []*MantikArtifact {
	if x != nil {
		return x.Hull
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credentials to validate
	// If empty, the default is validated
	Credentials *LoginCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{4}
}

func (x *LoginRequest) GetCredentials() *LoginCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the login token
	Token *LoginToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// until when the token is valid (optional)
	ValidUntil *timestamp.Timestamp `protobuf:"bytes,2,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{5}
}

func (x *LoginResponse) GetToken() *LoginToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LoginResponse) GetValidUntil() *timestamp.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

type LoginCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the server, if empty use the default of the engine
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Username of the server
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password of the server
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginCredentials) Reset() {
	*x = LoginCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCredentials) ProtoMessage() {}

func (x *LoginCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCredentials.ProtoReflect.Descriptor instead.
func (*LoginCredentials) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{6}
}

func (x *LoginCredentials) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LoginCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the server to talk to
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Token of the server to talk to
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LoginToken) Reset() {
	*x = LoginToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_engine_remote_registry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginToken) ProtoMessage() {}

func (x *LoginToken) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_engine_remote_registry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginToken.ProtoReflect.Descriptor instead.
func (*LoginToken) Descriptor() ([]byte, []int) {
	return file_mantik_engine_remote_registry_proto_rawDescGZIP(), []int{7}
}

func (x *LoginToken) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LoginToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_mantik_engine_remote_registry_proto protoreflect.FileDescriptor

var file_mantik_engine_remote_registry_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a,
	0x13, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a,
	0x14, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x68, 0x75,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x04, 0x68, 0x75, 0x6c, 0x6c, 0x22, 0x6d, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x2e,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x68, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x6e,
	0x74, 0x69, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x04, 0x68, 0x75, 0x6c,
	0x6c, 0x22, 0x5b, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x5c, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x34, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xcf, 0x02, 0x0a,
	0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x0c, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f,
	0x5a, 0x0d, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantik_engine_remote_registry_proto_rawDescOnce sync.Once
	file_mantik_engine_remote_registry_proto_rawDescData = file_mantik_engine_remote_registry_proto_rawDesc
)

func file_mantik_engine_remote_registry_proto_rawDescGZIP() []byte {
	file_mantik_engine_remote_registry_proto_rawDescOnce.Do(func() {
		file_mantik_engine_remote_registry_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantik_engine_remote_registry_proto_rawDescData)
	})
	return file_mantik_engine_remote_registry_proto_rawDescData
}

var file_mantik_engine_remote_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mantik_engine_remote_registry_proto_goTypes = []interface{}{
	(*PullArtifactRequest)(nil),  // 0: ai.mantik.engine.protos.PullArtifactRequest
	(*PullArtifactResponse)(nil), // 1: ai.mantik.engine.protos.PullArtifactResponse
	(*PushArtifactRequest)(nil),  // 2: ai.mantik.engine.protos.PushArtifactRequest
	(*PushArtifactResponse)(nil), // 3: ai.mantik.engine.protos.PushArtifactResponse
	(*LoginRequest)(nil),         // 4: ai.mantik.engine.protos.LoginRequest
	(*LoginResponse)(nil),        // 5: ai.mantik.engine.protos.LoginResponse
	(*LoginCredentials)(nil),     // 6: ai.mantik.engine.protos.LoginCredentials
	(*LoginToken)(nil),           // 7: ai.mantik.engine.protos.LoginToken
	(*MantikArtifact)(nil),       // 8: ai.mantik.engine.protos.MantikArtifact
	(*timestamp.Timestamp)(nil),  // 9: google.protobuf.Timestamp
}
var file_mantik_engine_remote_registry_proto_depIdxs = []int32{
	7,  // 0: ai.mantik.engine.protos.PullArtifactRequest.token:type_name -> ai.mantik.engine.protos.LoginToken
	8,  // 1: ai.mantik.engine.protos.PullArtifactResponse.artifact:type_name -> ai.mantik.engine.protos.MantikArtifact
	8,  // 2: ai.mantik.engine.protos.PullArtifactResponse.hull:type_name -> ai.mantik.engine.protos.MantikArtifact
	7,  // 3: ai.mantik.engine.protos.PushArtifactRequest.token:type_name -> ai.mantik.engine.protos.LoginToken
	8,  // 4: ai.mantik.engine.protos.PushArtifactResponse.artifact:type_name -> ai.mantik.engine.protos.MantikArtifact
	8,  // 5: ai.mantik.engine.protos.PushArtifactResponse.hull:type_name -> ai.mantik.engine.protos.MantikArtifact
	6,  // 6: ai.mantik.engine.protos.LoginRequest.credentials:type_name -> ai.mantik.engine.protos.LoginCredentials
	7,  // 7: ai.mantik.engine.protos.LoginResponse.token:type_name -> ai.mantik.engine.protos.LoginToken
	9,  // 8: ai.mantik.engine.protos.LoginResponse.valid_until:type_name -> google.protobuf.Timestamp
	0,  // 9: ai.mantik.engine.protos.RemoteRegistryService.PullArtifact:input_type -> ai.mantik.engine.protos.PullArtifactRequest
	2,  // 10: ai.mantik.engine.protos.RemoteRegistryService.PushArtifact:input_type -> ai.mantik.engine.protos.PushArtifactRequest
	4,  // 11: ai.mantik.engine.protos.RemoteRegistryService.Login:input_type -> ai.mantik.engine.protos.LoginRequest
	1,  // 12: ai.mantik.engine.protos.RemoteRegistryService.PullArtifact:output_type -> ai.mantik.engine.protos.PullArtifactResponse
	3,  // 13: ai.mantik.engine.protos.RemoteRegistryService.PushArtifact:output_type -> ai.mantik.engine.protos.PushArtifactResponse
	5,  // 14: ai.mantik.engine.protos.RemoteRegistryService.Login:output_type -> ai.mantik.engine.protos.LoginResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_mantik_engine_remote_registry_proto_init() }
func file_mantik_engine_remote_registry_proto_init() {
	if File_mantik_engine_remote_registry_proto != nil {
		return
	}
	file_mantik_engine_registry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mantik_engine_remote_registry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_engine_remote_registry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantik_engine_remote_registry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mantik_engine_remote_registry_proto_goTypes,
		DependencyIndexes: file_mantik_engine_remote_registry_proto_depIdxs,
		MessageInfos:      file_mantik_engine_remote_registry_proto_msgTypes,
	}.Build()
	File_mantik_engine_remote_registry_proto = out.File
	file_mantik_engine_remote_registry_proto_rawDesc = nil
	file_mantik_engine_remote_registry_proto_goTypes = nil
	file_mantik_engine_remote_registry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteRegistryServiceClient is the client API for RemoteRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteRegistryServiceClient interface {
	// Pulls an artifact from Remote registry
	PullArtifact(ctx context.Context, in *PullArtifactRequest, opts ...grpc.CallOption) (*PullArtifactResponse, error)
	// Pushes an artifact to the remote registry
	PushArtifact(ctx context.Context, in *PushArtifactRequest, opts ...grpc.CallOption) (*PushArtifactResponse, error)
	// Execute a login request
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type remoteRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteRegistryServiceClient(cc grpc.ClientConnInterface) RemoteRegistryServiceClient {
	return &remoteRegistryServiceClient{cc}
}

func (c *remoteRegistryServiceClient) PullArtifact(ctx context.Context, in *PullArtifactRequest, opts ...grpc.CallOption) (*PullArtifactResponse, error) {
	out := new(PullArtifactResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.RemoteRegistryService/PullArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteRegistryServiceClient) PushArtifact(ctx context.Context, in *PushArtifactRequest, opts ...grpc.CallOption) (*PushArtifactResponse, error) {
	out := new(PushArtifactResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.RemoteRegistryService/PushArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteRegistryServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/ai.mantik.engine.protos.RemoteRegistryService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteRegistryServiceServer is the server API for RemoteRegistryService service.
type RemoteRegistryServiceServer interface {
	// Pulls an artifact from Remote registry
	PullArtifact(context.Context, *PullArtifactRequest) (*PullArtifactResponse, error)
	// Pushes an artifact to the remote registry
	PushArtifact(context.Context, *PushArtifactRequest) (*PushArtifactResponse, error)
	// Execute a login request
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

// UnimplementedRemoteRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteRegistryServiceServer struct {
}

func (*UnimplementedRemoteRegistryServiceServer) PullArtifact(context.Context, *PullArtifactRequest) (*PullArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullArtifact not implemented")
}
func (*UnimplementedRemoteRegistryServiceServer) PushArtifact(context.Context, *PushArtifactRequest) (*PushArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushArtifact not implemented")
}
func (*UnimplementedRemoteRegistryServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterRemoteRegistryServiceServer(s *grpc.Server, srv RemoteRegistryServiceServer) {
	s.RegisterService(&_RemoteRegistryService_serviceDesc, srv)
}

func _RemoteRegistryService_PullArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteRegistryServiceServer).PullArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.RemoteRegistryService/PullArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteRegistryServiceServer).PullArtifact(ctx, req.(*PullArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRegistryService_PushArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteRegistryServiceServer).PushArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.RemoteRegistryService/PushArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteRegistryServiceServer).PushArtifact(ctx, req.(*PushArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRegistryService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteRegistryServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.mantik.engine.protos.RemoteRegistryService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteRegistryServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteRegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.mantik.engine.protos.RemoteRegistryService",
	HandlerType: (*RemoteRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullArtifact",
			Handler:    _RemoteRegistryService_PullArtifact_Handler,
		},
		{
			MethodName: "PushArtifact",
			Handler:    _RemoteRegistryService_PushArtifact_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RemoteRegistryService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantik/engine/remote_registry.proto",
}
