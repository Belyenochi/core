syntax = "proto3";

package ai.mantik.engine.protos;
option go_package = "mantik/engine";

import "mantik/engine/ds.proto";

/* Responsible for evaluating the value of graph objects. */
service GraphExecutorService {
    /** Evaluates and fetches the content of a dataset. */
    rpc FetchDataSet(FetchItemRequest) returns (FetchItemResponse) {}
    /** Evaluates and saves an item to the repository. */
    rpc SaveItem(SaveItemRequest) returns (SaveItemResponse) {}
    /** Deploys an Item to the cluster. */
    rpc DeployItem(DeployItemRequest) returns (DeployItemResponse) {}
}

message FetchItemRequest {
    string session_id = 1;
    string dataset_id = 2;
    // Requested Encoding
    BundleEncoding encoding = 3;
}

message FetchItemResponse {
    Bundle bundle = 1;
}

message SaveItemRequest {
    string session_id = 1;
    string item_id = 2;
    // Name under which the item is to be stored (can be name:version)
    // if not given, the current name is used (see tag command)
    string name = 3;
}

message SaveItemResponse {
    // Name under which the item has been saved, can be empty
    string name = 1;
    // Mantik Item Id under which this item has been saved.
    string mantik_item_id = 2;
}

message DeployItemRequest {
    string session_id = 1;
    string item_id = 2;
    // Ingress name for the item (required for Pipelines, also only supported there yet)
    string ingress_name = 3;
    // A Hint for the Service Name (not required)
    string name_hint = 4;
}

message DeployItemResponse {
    // Service name used in the end
    string name = 1;
    // Internal URL (inside the Cluster)
    string internal_url = 2;
    // External URL (only valid if an ingress is set)
    string external_url = 3;
}