// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: mantik/mnp/mnp.proto

package mnp

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionState int32

const (
	SessionState_SS_INITIALIZING SessionState = 0
	SessionState_SS_DOWNLOADING  SessionState = 1
	SessionState_SS_STARTING_UP  SessionState = 2
	SessionState_SS_READY        SessionState = 3
	SessionState_SS_FAILED       SessionState = 4
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0: "SS_INITIALIZING",
		1: "SS_DOWNLOADING",
		2: "SS_STARTING_UP",
		3: "SS_READY",
		4: "SS_FAILED",
	}
	SessionState_value = map[string]int32{
		"SS_INITIALIZING": 0,
		"SS_DOWNLOADING":  1,
		"SS_STARTING_UP":  2,
		"SS_READY":        3,
		"SS_FAILED":       4,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_mantik_mnp_mnp_proto_enumTypes[0].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_mantik_mnp_mnp_proto_enumTypes[0]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{0}
}

// The state of a task
type TaskState int32

const (
	TaskState_TS_UNKNOWN  TaskState = 0
	TaskState_TS_EXISTS   TaskState = 1
	TaskState_TS_FINISHED TaskState = 2
	TaskState_TS_FAILED   TaskState = 3
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TS_UNKNOWN",
		1: "TS_EXISTS",
		2: "TS_FINISHED",
		3: "TS_FAILED",
	}
	TaskState_value = map[string]int32{
		"TS_UNKNOWN":  0,
		"TS_EXISTS":   1,
		"TS_FINISHED": 2,
		"TS_FAILED":   3,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_mantik_mnp_mnp_proto_enumTypes[1].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_mantik_mnp_mnp_proto_enumTypes[1]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{1}
}

type AboutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AboutRequest) Reset() {
	*x = AboutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AboutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AboutRequest) ProtoMessage() {}

func (x *AboutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AboutRequest.ProtoReflect.Descriptor instead.
func (*AboutRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{0}
}

type AboutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Name of the node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Upper layer specific response
	Extra *any.Any `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AboutResponse) Reset() {
	*x = AboutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AboutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AboutResponse) ProtoMessage() {}

func (x *AboutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AboutResponse.ProtoReflect.Descriptor instead.
func (*AboutResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{1}
}

func (x *AboutResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AboutResponse) GetExtra() *any.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the session to initialize.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The configuration to initialize the node
	// The concrete way of doing this is handled one layer above.
	Configuration *any.Any `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// input port configuration
	Inputs []*ConfigureInputPort `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// output port configuration
	Outputs []*ConfigureOutputPort `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{2}
}

func (x *InitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *InitRequest) GetConfiguration() *any.Any {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *InitRequest) GetInputs() []*ConfigureInputPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *InitRequest) GetOutputs() []*ConfigureOutputPort {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type ConfigureInputPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// selected content_type, if empty use default
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *ConfigureInputPort) Reset() {
	*x = ConfigureInputPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureInputPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureInputPort) ProtoMessage() {}

func (x *ConfigureInputPort) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureInputPort.ProtoReflect.Descriptor instead.
func (*ConfigureInputPort) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigureInputPort) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

// Configures output ports
type ConfigureOutputPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// select content_type, if empty use default
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// if non empty, forward output data somewhere else
	// Format: mnp://address/sessionId/portId  --> then data will be pushed
	DestinationUrl string `protobuf:"bytes,2,opt,name=destination_url,json=destinationUrl,proto3" json:"destination_url,omitempty"`
}

func (x *ConfigureOutputPort) Reset() {
	*x = ConfigureOutputPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureOutputPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureOutputPort) ProtoMessage() {}

func (x *ConfigureOutputPort) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureOutputPort.ProtoReflect.Descriptor instead.
func (*ConfigureOutputPort) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigureOutputPort) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ConfigureOutputPort) GetDestinationUrl() string {
	if x != nil {
		return x.DestinationUrl
	}
	return ""
}

// Response of an init request.
type InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session state.
	State SessionState `protobuf:"varint,1,opt,name=state,proto3,enum=SessionState" json:"state,omitempty"`
	// Error message (for failure).
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InitResponse) Reset() {
	*x = InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResponse) ProtoMessage() {}

func (x *InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResponse.ProtoReflect.Descriptor instead.
func (*InitResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{5}
}

func (x *InitResponse) GetState() SessionState {
	if x != nil {
		return x.State
	}
	return SessionState_SS_INITIALIZING
}

func (x *InitResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type QuitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuitRequest) Reset() {
	*x = QuitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitRequest) ProtoMessage() {}

func (x *QuitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitRequest.ProtoReflect.Descriptor instead.
func (*QuitRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{6}
}

type QuitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuitResponse) Reset() {
	*x = QuitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitResponse) ProtoMessage() {}

func (x *QuitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitResponse.ProtoReflect.Descriptor instead.
func (*QuitResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{7}
}

type QuitSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session to use
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *QuitSessionRequest) Reset() {
	*x = QuitSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitSessionRequest) ProtoMessage() {}

func (x *QuitSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitSessionRequest.ProtoReflect.Descriptor instead.
func (*QuitSessionRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{8}
}

func (x *QuitSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type QuitSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuitSessionResponse) Reset() {
	*x = QuitSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitSessionResponse) ProtoMessage() {}

func (x *QuitSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitSessionResponse.ProtoReflect.Descriptor instead.
func (*QuitSessionResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{9}
}

type PushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the session
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The ID of the task, will be created ad hoc
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The id of the port the data should go to
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Data Size hint, undefined if < 0
	DataSize int64 `protobuf:"varint,4,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// If true then this is the last element
	Done bool `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
	// the data payload
	// can be repeated
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{10}
}

func (x *PushRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PushRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PushRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PushRequest) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *PushRequest) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *PushRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{11}
}

type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the session
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The ID of the task
	// If the task is not yet existing, it will block some time
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The id of the port which data should be read
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{12}
}

func (x *PullRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PullRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PullRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size hint of data, <0 for undefined, header only
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// if true, then this is the last element
	Done bool `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	// A data blob
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PullResponse) Reset() {
	*x = PullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullResponse) ProtoMessage() {}

func (x *PullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullResponse.ProtoReflect.Descriptor instead.
func (*PullResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{13}
}

func (x *PullResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PullResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *PullResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the session
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The id of the task
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// if true, the task will be created if not existing
	Ensure bool `protobuf:"varint,3,opt,name=ensure,proto3" json:"ensure,omitempty"`
}

func (x *QueryTaskRequest) Reset() {
	*x = QueryTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskRequest) ProtoMessage() {}

func (x *QueryTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskRequest) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{14}
}

func (x *QueryTaskRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *QueryTaskRequest) GetEnsure() bool {
	if x != nil {
		return x.Ensure
	}
	return false
}

// The state of a task's port
type TaskPortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of transferred messages
	MsgCount int32 `protobuf:"varint,1,opt,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty"`
	// the amount of transferred bytes
	Data int64 `protobuf:"varint,2,opt,name=data,proto3" json:"data,omitempty"`
	// if there was an error on this port
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// the port is finished
	Done bool `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *TaskPortStatus) Reset() {
	*x = TaskPortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPortStatus) ProtoMessage() {}

func (x *TaskPortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPortStatus.ProtoReflect.Descriptor instead.
func (*TaskPortStatus) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{15}
}

func (x *TaskPortStatus) GetMsgCount() int32 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

func (x *TaskPortStatus) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *TaskPortStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskPortStatus) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

// Result of a Query Task call
// Note: not all fields may be supported by all bridges yet
type QueryTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the task
	State TaskState `protobuf:"varint,1,opt,name=state,proto3,enum=TaskState" json:"state,omitempty"`
	// An error description if known
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Information about input ports
	Inputs []*TaskPortStatus `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Information about output ports
	Outputs []*TaskPortStatus `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *QueryTaskResponse) Reset() {
	*x = QueryTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantik_mnp_mnp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskResponse) ProtoMessage() {}

func (x *QueryTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mantik_mnp_mnp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryTaskResponse) Descriptor() ([]byte, []int) {
	return file_mantik_mnp_mnp_proto_rawDescGZIP(), []int{16}
}

func (x *QueryTaskResponse) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TS_UNKNOWN
}

func (x *QueryTaskResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *QueryTaskResponse) GetInputs() []*TaskPortStatus {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *QueryTaskResponse) GetOutputs() []*TaskPortStatus {
	if x != nil {
		return x.Outputs
	}
	return nil
}

var File_mantik_mnp_mnp_proto protoreflect.FileDescriptor

var file_mantik_mnp_mnp_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6d, 0x6e, 0x70, 0x2f, 0x6d, 0x6e, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e,
	0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f,
	0x0a, 0x0d, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xc5, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x61, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x0d,
	0x0a, 0x0b, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a,
	0x0c, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a,
	0x12, 0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0b, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x0b, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x62, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x22, 0x6b, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x2a, 0x68, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x53, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x4a,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x53,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xd1, 0x02, 0x0a, 0x0a, 0x4d,
	0x6e, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x41, 0x62, 0x6f,
	0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x41, 0x62, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x04,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x0c, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12, 0x0c, 0x2e,
	0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x51, 0x75,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b,
	0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x51, 0x75,
	0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0c,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x27, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x0c, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x11, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24,
	0x0a, 0x16, 0x61, 0x69, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6d, 0x6e, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a, 0x0a, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x6b,
	0x2f, 0x6d, 0x6e, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantik_mnp_mnp_proto_rawDescOnce sync.Once
	file_mantik_mnp_mnp_proto_rawDescData = file_mantik_mnp_mnp_proto_rawDesc
)

func file_mantik_mnp_mnp_proto_rawDescGZIP() []byte {
	file_mantik_mnp_mnp_proto_rawDescOnce.Do(func() {
		file_mantik_mnp_mnp_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantik_mnp_mnp_proto_rawDescData)
	})
	return file_mantik_mnp_mnp_proto_rawDescData
}

var file_mantik_mnp_mnp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mantik_mnp_mnp_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_mantik_mnp_mnp_proto_goTypes = []interface{}{
	(SessionState)(0),           // 0: SessionState
	(TaskState)(0),              // 1: TaskState
	(*AboutRequest)(nil),        // 2: AboutRequest
	(*AboutResponse)(nil),       // 3: AboutResponse
	(*InitRequest)(nil),         // 4: InitRequest
	(*ConfigureInputPort)(nil),  // 5: ConfigureInputPort
	(*ConfigureOutputPort)(nil), // 6: ConfigureOutputPort
	(*InitResponse)(nil),        // 7: InitResponse
	(*QuitRequest)(nil),         // 8: QuitRequest
	(*QuitResponse)(nil),        // 9: QuitResponse
	(*QuitSessionRequest)(nil),  // 10: QuitSessionRequest
	(*QuitSessionResponse)(nil), // 11: QuitSessionResponse
	(*PushRequest)(nil),         // 12: PushRequest
	(*PushResponse)(nil),        // 13: PushResponse
	(*PullRequest)(nil),         // 14: PullRequest
	(*PullResponse)(nil),        // 15: PullResponse
	(*QueryTaskRequest)(nil),    // 16: QueryTaskRequest
	(*TaskPortStatus)(nil),      // 17: TaskPortStatus
	(*QueryTaskResponse)(nil),   // 18: QueryTaskResponse
	(*any.Any)(nil),             // 19: google.protobuf.Any
	(*empty.Empty)(nil),         // 20: google.protobuf.Empty
}
var file_mantik_mnp_mnp_proto_depIdxs = []int32{
	19, // 0: AboutResponse.extra:type_name -> google.protobuf.Any
	19, // 1: InitRequest.configuration:type_name -> google.protobuf.Any
	5,  // 2: InitRequest.inputs:type_name -> ConfigureInputPort
	6,  // 3: InitRequest.outputs:type_name -> ConfigureOutputPort
	0,  // 4: InitResponse.state:type_name -> SessionState
	1,  // 5: QueryTaskResponse.state:type_name -> TaskState
	17, // 6: QueryTaskResponse.inputs:type_name -> TaskPortStatus
	17, // 7: QueryTaskResponse.outputs:type_name -> TaskPortStatus
	20, // 8: MnpService.About:input_type -> google.protobuf.Empty
	4,  // 9: MnpService.Init:input_type -> InitRequest
	8,  // 10: MnpService.Quit:input_type -> QuitRequest
	10, // 11: MnpService.QuitSession:input_type -> QuitSessionRequest
	12, // 12: MnpService.Push:input_type -> PushRequest
	14, // 13: MnpService.Pull:input_type -> PullRequest
	16, // 14: MnpService.QueryTask:input_type -> QueryTaskRequest
	3,  // 15: MnpService.About:output_type -> AboutResponse
	7,  // 16: MnpService.Init:output_type -> InitResponse
	9,  // 17: MnpService.Quit:output_type -> QuitResponse
	11, // 18: MnpService.QuitSession:output_type -> QuitSessionResponse
	13, // 19: MnpService.Push:output_type -> PushResponse
	15, // 20: MnpService.Pull:output_type -> PullResponse
	18, // 21: MnpService.QueryTask:output_type -> QueryTaskResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_mantik_mnp_mnp_proto_init() }
func file_mantik_mnp_mnp_proto_init() {
	if File_mantik_mnp_mnp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mantik_mnp_mnp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AboutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AboutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureInputPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureOutputPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantik_mnp_mnp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantik_mnp_mnp_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mantik_mnp_mnp_proto_goTypes,
		DependencyIndexes: file_mantik_mnp_mnp_proto_depIdxs,
		EnumInfos:         file_mantik_mnp_mnp_proto_enumTypes,
		MessageInfos:      file_mantik_mnp_mnp_proto_msgTypes,
	}.Build()
	File_mantik_mnp_mnp_proto = out.File
	file_mantik_mnp_mnp_proto_rawDesc = nil
	file_mantik_mnp_mnp_proto_goTypes = nil
	file_mantik_mnp_mnp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MnpServiceClient is the client API for MnpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MnpServiceClient interface {
	// Gathers information about the bridge.
	About(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AboutResponse, error)
	// Initialize the Node
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (MnpService_InitClient, error)
	// Quit the node.
	Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (*QuitResponse, error)
	// Quits the session
	QuitSession(ctx context.Context, in *QuitSessionRequest, opts ...grpc.CallOption) (*QuitSessionResponse, error)
	// Push data into a port, creating a task when necessary
	Push(ctx context.Context, opts ...grpc.CallOption) (MnpService_PushClient, error)
	// Pull data from a port, creating a task when necesary
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (MnpService_PullClient, error)
	// Queries a task (can create if not existent)
	QueryTask(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error)
}

type mnpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMnpServiceClient(cc grpc.ClientConnInterface) MnpServiceClient {
	return &mnpServiceClient{cc}
}

func (c *mnpServiceClient) About(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, "/MnpService/About", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnpServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (MnpService_InitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MnpService_serviceDesc.Streams[0], "/MnpService/Init", opts...)
	if err != nil {
		return nil, err
	}
	x := &mnpServiceInitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MnpService_InitClient interface {
	Recv() (*InitResponse, error)
	grpc.ClientStream
}

type mnpServiceInitClient struct {
	grpc.ClientStream
}

func (x *mnpServiceInitClient) Recv() (*InitResponse, error) {
	m := new(InitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mnpServiceClient) Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (*QuitResponse, error) {
	out := new(QuitResponse)
	err := c.cc.Invoke(ctx, "/MnpService/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnpServiceClient) QuitSession(ctx context.Context, in *QuitSessionRequest, opts ...grpc.CallOption) (*QuitSessionResponse, error) {
	out := new(QuitSessionResponse)
	err := c.cc.Invoke(ctx, "/MnpService/QuitSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnpServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (MnpService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MnpService_serviceDesc.Streams[1], "/MnpService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &mnpServicePushClient{stream}
	return x, nil
}

type MnpService_PushClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*PushResponse, error)
	grpc.ClientStream
}

type mnpServicePushClient struct {
	grpc.ClientStream
}

func (x *mnpServicePushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mnpServicePushClient) CloseAndRecv() (*PushResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mnpServiceClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (MnpService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MnpService_serviceDesc.Streams[2], "/MnpService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &mnpServicePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MnpService_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type mnpServicePullClient struct {
	grpc.ClientStream
}

func (x *mnpServicePullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mnpServiceClient) QueryTask(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error) {
	out := new(QueryTaskResponse)
	err := c.cc.Invoke(ctx, "/MnpService/QueryTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MnpServiceServer is the server API for MnpService service.
type MnpServiceServer interface {
	// Gathers information about the bridge.
	About(context.Context, *empty.Empty) (*AboutResponse, error)
	// Initialize the Node
	Init(*InitRequest, MnpService_InitServer) error
	// Quit the node.
	Quit(context.Context, *QuitRequest) (*QuitResponse, error)
	// Quits the session
	QuitSession(context.Context, *QuitSessionRequest) (*QuitSessionResponse, error)
	// Push data into a port, creating a task when necessary
	Push(MnpService_PushServer) error
	// Pull data from a port, creating a task when necesary
	Pull(*PullRequest, MnpService_PullServer) error
	// Queries a task (can create if not existent)
	QueryTask(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error)
}

// UnimplementedMnpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMnpServiceServer struct {
}

func (*UnimplementedMnpServiceServer) About(context.Context, *empty.Empty) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method About not implemented")
}
func (*UnimplementedMnpServiceServer) Init(*InitRequest, MnpService_InitServer) error {
	return status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedMnpServiceServer) Quit(context.Context, *QuitRequest) (*QuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (*UnimplementedMnpServiceServer) QuitSession(context.Context, *QuitSessionRequest) (*QuitSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitSession not implemented")
}
func (*UnimplementedMnpServiceServer) Push(MnpService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedMnpServiceServer) Pull(*PullRequest, MnpService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedMnpServiceServer) QueryTask(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTask not implemented")
}

func RegisterMnpServiceServer(s *grpc.Server, srv MnpServiceServer) {
	s.RegisterService(&_MnpService_serviceDesc, srv)
}

func _MnpService_About_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnpServiceServer).About(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MnpService/About",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnpServiceServer).About(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MnpService_Init_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MnpServiceServer).Init(m, &mnpServiceInitServer{stream})
}

type MnpService_InitServer interface {
	Send(*InitResponse) error
	grpc.ServerStream
}

type mnpServiceInitServer struct {
	grpc.ServerStream
}

func (x *mnpServiceInitServer) Send(m *InitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MnpService_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnpServiceServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MnpService/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnpServiceServer).Quit(ctx, req.(*QuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MnpService_QuitSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnpServiceServer).QuitSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MnpService/QuitSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnpServiceServer).QuitSession(ctx, req.(*QuitSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MnpService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MnpServiceServer).Push(&mnpServicePushServer{stream})
}

type MnpService_PushServer interface {
	SendAndClose(*PushResponse) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type mnpServicePushServer struct {
	grpc.ServerStream
}

func (x *mnpServicePushServer) SendAndClose(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mnpServicePushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MnpService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MnpServiceServer).Pull(m, &mnpServicePullServer{stream})
}

type MnpService_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type mnpServicePullServer struct {
	grpc.ServerStream
}

func (x *mnpServicePullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MnpService_QueryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnpServiceServer).QueryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MnpService/QueryTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnpServiceServer).QueryTask(ctx, req.(*QueryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MnpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MnpService",
	HandlerType: (*MnpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "About",
			Handler:    _MnpService_About_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _MnpService_Quit_Handler,
		},
		{
			MethodName: "QuitSession",
			Handler:    _MnpService_QuitSession_Handler,
		},
		{
			MethodName: "QueryTask",
			Handler:    _MnpService_QueryTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Init",
			Handler:       _MnpService_Init_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _MnpService_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _MnpService_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mantik/mnp/mnp.proto",
}
