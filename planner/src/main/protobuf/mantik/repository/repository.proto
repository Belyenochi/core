syntax = "proto3";
package ai.mantik.planner.repository.protos;
import "mantik/repository/types.proto";

/* Holds local available Mantik Objects. */
service RepositoryService {
    // Get a single item
    rpc Get (GetItemRequest) returns (GetItemResponse) {}

    // Store an item
    rpc Store(StoreRequest) returns (StoreResponse) {}

    // Ensure a new MantikId for an itemid.
    rpc EnsureMantikId(EnsureMantikIdRequest) returns (EnsureMantikIdResponse) {}

    // Update the deployment state of an element
    rpc SetDeploymentInfo(SetDeploymentInfoRequest) returns (SetDeploymentInfoResponse) {}

    // Remove an item
    rpc Remove(RemoveRequest) returns (RemoveResponse) {}

    // List items
    rpc List(ListRequest) returns (ListResponse) {}
}

message GetItemRequest {
    string mantik_id = 1;
}

message GetItemResponse {
    MantikArtifact artifact = 1;
}

message StoreRequest {
    MantikArtifact artifact = 1;
}

message StoreResponse {
    // Empty yet
}

message EnsureMantikIdRequest {
    string item_id = 1;
    string mantik_id = 2;
}

message EnsureMantikIdResponse {
    bool changed = 1;
}

message SetDeploymentInfoRequest {
    // The item whose deployment info is going to be updated
    string item_id = 1;
    // the new deployment info
    DeploymentInfo info = 2;
}

message SetDeploymentInfoResponse {
    // True if item was found and updated
    bool updated = 1;
}

message RemoveRequest {
    // The item which is going to be removed.
    string mantik_id = 1;
}

message RemoveResponse {
    // True, if the item was found
    bool found = 1;
}

message ListRequest {
    // if true, also anonymous items are returned
    bool also_anonymous = 1;
    // if true, only deployed items are returned
    bool deployed_only = 2;
    // if true, items are filtered by kind.
    string kind_filter = 3;
}

message ListResponse {
    repeated MantikArtifact artifacts = 1;
}